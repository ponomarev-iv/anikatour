/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$i-facebook-name: 'i-facebook';
$i-facebook-x: 77px;
$i-facebook-y: 0px;
$i-facebook-offset-x: -77px;
$i-facebook-offset-y: 0px;
$i-facebook-width: 18px;
$i-facebook-height: 35px;
$i-facebook-total-width: 95px;
$i-facebook-total-height: 69px;
$i-facebook-image: '../img/sprite.png';
$i-facebook: (77px, 0px, -77px, 0px, 18px, 35px, 95px, 69px, '../img/sprite.png', 'i-facebook', );
$i-instagram-name: 'i-instagram';
$i-instagram-x: 0px;
$i-instagram-y: 0px;
$i-instagram-offset-x: 0px;
$i-instagram-offset-y: 0px;
$i-instagram-width: 36px;
$i-instagram-height: 35px;
$i-instagram-total-width: 95px;
$i-instagram-total-height: 69px;
$i-instagram-image: '../img/sprite.png';
$i-instagram: (0px, 0px, 0px, 0px, 36px, 35px, 95px, 69px, '../img/sprite.png', 'i-instagram', );
$i-location-name: 'i-location';
$i-location-x: 29px;
$i-location-y: 38px;
$i-location-offset-x: -29px;
$i-location-offset-y: -38px;
$i-location-width: 23px;
$i-location-height: 30px;
$i-location-total-width: 95px;
$i-location-total-height: 69px;
$i-location-image: '../img/sprite.png';
$i-location: (29px, 38px, -29px, -38px, 23px, 30px, 95px, 69px, '../img/sprite.png', 'i-location', );
$i-phone-name: 'i-phone';
$i-phone-x: 0px;
$i-phone-y: 38px;
$i-phone-offset-x: 0px;
$i-phone-offset-y: -38px;
$i-phone-width: 26px;
$i-phone-height: 31px;
$i-phone-total-width: 95px;
$i-phone-total-height: 69px;
$i-phone-image: '../img/sprite.png';
$i-phone: (0px, 38px, 0px, -38px, 26px, 31px, 95px, 69px, '../img/sprite.png', 'i-phone', );
$i-vk-name: 'i-vk';
$i-vk-x: 39px;
$i-vk-y: 0px;
$i-vk-offset-x: -39px;
$i-vk-offset-y: 0px;
$i-vk-width: 35px;
$i-vk-height: 23px;
$i-vk-total-width: 95px;
$i-vk-total-height: 69px;
$i-vk-image: '../img/sprite.png';
$i-vk: (39px, 0px, -39px, 0px, 35px, 23px, 95px, 69px, '../img/sprite.png', 'i-vk', );
$spritesheet-width: 95px;
$spritesheet-height: 69px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($i-facebook, $i-instagram, $i-location, $i-phone, $i-vk, );
$spritesheet: (95px, 69px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
